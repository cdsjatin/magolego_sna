x<-seq(1,20,by=2)
class(x)
x
x<-seq(20,2,by=-4)
x
y<-rep(3,4)
y
z<-c(y,x)
z
i<-c(1,2,3)
x[i]  # Refer to an element i of x - returns an object of the same class as the original
j<-c(-1,-2,-3)
x[j]  # Negative values are omitted
length(x) # Number of elements in x
# Addition/Multiplication of two vectors of the same length
x<-c(2,3,4,5)
y<-c(1,2,3,4)
x*y
x+y
z<-c(1,2)
x+z # R automatically repeats the shorter vector
x<-0:5
class(x)
as.logical(x) # Convention: By default 0 is FALSE and all other numbers are TRUE
as.character(x)
# Vectors can only contain objects of the same class (exception is a list)
# When different objects are put together in a vector, coercion occurs
x<-c(TRUE,2)
x
x<-c("a",TRUE)
x
# Missing data are denoted by NaN (Not a Number - used for undefined maths operations) or NA (Not Avalaible - for anything else)
# NA values can also have types: integer NA, character NA,...
a<- NA
is.na(a)
a<-c(1, NA, 2, NaN)
is.nan(a)
is.na(a)
any(is.na(a))
mean(a) #NA can propagate
a[!is.na(a)] #Removing bad values from a vector
a[!is.nan(a)]
#============
# **Matrices** are vectors with a dimension attribute (vector of length 2).
m<-matrix(1:6,nrow=2,ncol=3,byrow=FALSE)
m
m<-matrix(1:6,nrow=2,ncol=3,byrow=TRUE)
m
m<-matrix(1:6,nrow=2,ncol=3) #Default is by column: matrices are constructed column-wise
m
m<-matrix(1:4,nrow=2,ncol=3) #If insufficient data, it is reused as many times as needed
m<-matrix(1:6,nrow=2,ncol=3,byrow=FALSE)
m
m<-matrix(1:6,nrow=2,ncol=3,byrow=TRUE)
m
m<-matrix(1:6,nrow=2,ncol=3) #Default is by column: matrices are constructed column-wise
m
attributes(m)
dim(m)
y<-rep(c(1,2),2)
x
y
cbind(x,y)
rbind(x,y)
#============
# **Logical** expression formed using comparison operators <,>,<=,>=,==,!= and logical operators &, |,!
c(0,1,0,0)|c(1,0,0,0)
x<-c(1, NA, 3 , 4)
x>2
#Index the position of TRUE elements using the function which
x<-c(2,4,6,8,10,12)
which(x>5)
#============
# **Lists** are a type of vectors that contains elements of a different class.
library(datasets)
data(diamond)
data(women)
summary(women)
summary(Animals)
data(Aminals)
data(Animals)
data('Animals')
data('animals')
data('titanic')
data('Titanic')
summary(Titanic)
summary(iris)
data(iris)
summary(iris)
int('1')
integer('1')
integer('2')
integer('3')
as.character(3)
toString(123123)
installed.packages('dplyr')
installed.packages('ggplot2')
installed.packages('psych')
install.packages('dplyr')
install.packages('ggplot2')
install.packages('GGally')
install.packages('psych')
install.packages('devtools')
library(devtools)
install_github('demeshev/sophisthse')
install_github('bdemeshev/sophisthse')
install.packages('dplyr')
install.packages('lazyeval')
install_github('bdemeshev/sophisthse')
R
version()
R.version
install.packages('lazyeval')
r <- runif(100)
xmin <- 1
alpha <- 2
x <- (1 - r)**(-1.0/(alpha - 1)) * xmin
plot(x)
hist(x)
hist(x, breaks = 50)
r <- runif(1000)
xmin <- 1
alpha <- 2
x <- (1 - r)**(-1.0/(alpha - 1)) * xmin
hist(x, breaks = 50)
r <- runif(1000)
xmin <- 1
alpha <- 2
x <- (1 - r)**(-1.0/(alpha - 1)) * xmin
hist(x, breaks = 500)
xmin <- 1
alpha <- 3
x <- (1 - r)**(-1.0/(alpha - 1)) * xmin
hist(x, breaks = 500)
r <- runif(1000)
xmin <- 1
xmax <- 100
alpha <- 3
x <- (-alpha+1)/(xmax-xmin)*((r-xmin)/(xmax-xmin))^(-alpha)
hist(x, breaks = 500)
x <- (1+alpha)/(xmax^(alpha)-xmin^(alpha))*r^alpha
hist(x, breaks = 500)
alpha <- 2
x <- (1+alpha)/(xmax^(alpha)-xmin^(alpha))*r^alpha
hist(x, breaks = 500)
x <- (1-alpha)/(xmax^(-alpha)-xmin^(-alpha))*r^(-alpha)
hist(x, breaks = 500)
x <- (xmin^(alpha+1)+r*(xmax^(alpha+1)-xmin^(alpha+1)))^(1/(alpha+1).
x <- (xmin^(alpha+1)+r*(xmax^(alpha+1)-xmin^(alpha+1)))^(1/(alpha+1)
hist(x, breaks = 500)
x <- (xmin^(alpha+1)+r*(xmax^(alpha+1)-xmin^(alpha+1)))^(1/(alpha+1)
x <- (xmin^(alpha+1)+r*(xmax^(alpha+1)-xmin^(alpha+1)))^(1/(alpha+1))
hist(x, breaks = 500)
alpha <- -3
x <- (xmin^(alpha+1)+r*(xmax^(alpha+1)-xmin^(alpha+1)))^(1/(alpha+1))
hist(x, breaks = 500)
x <- (xmin^(-alpha+1)+r*(xmax^(-alpha+1)-xmin^(-alpha+1)))^(1/(-alpha+1))
hist(x, breaks = 500)
alpha <- 3
x <- (xmin^(-alpha+1)+r*(xmax^(-alpha+1)-xmin^(-alpha+1)))^(1/(-alpha+1))
hist(x, breaks = 500)
min(x)
max(x)
x <- (xmin^(-alpha+1)+r*(xmax^(-alpha+1)-xmin^(-alpha+1)))^(1/(-alpha+1))
hist(x, breaks = 500)
hist(x, breaks = 500)
max(x)
r <- runif(1000)
x <- (xmin^(-alpha+1)+r*(xmax^(-alpha+1)-xmin^(-alpha+1)))^(1/(-alpha+1))
hist(x, breaks = 500)
hist(x, breaks = 500)
max(x)
alpha <- 2
x <- (xmin^(-alpha+1)+r*(xmax^(-alpha+1)-xmin^(-alpha+1)))^(1/(-alpha+1))
hist(x, breaks = 500)
h <- hist(x, breaks = 500)
h
plot(h$mids,h$density)
plot(h$mids,h$density,pch = 11)
plot(h$mids,h$density,pch = 12)
plot(h$mids,h$density,pch = '-')
plot(h$mids,h$density,pch = '--')
plot(h$mids,h$density,pch = '-r')
library(ggplot2)
qplot(data = h, x = mids, y = density, geom = 'line')
qplot(x = h$mids, y = h$density, geom = 'line')
qplot(x = h$mids, y = h$density, geom = 'line') +
g <- qplot(x = h$mids, y = h$density, geom = 'line') +
g <- qplot(x = h$mids, y = h$density, geom = 'line')
alpha <- 3
x <- (xmin^(-alpha+1)+r*(xmax^(-alpha+1)-xmin^(-alpha+1)))^(1/(-alpha+1))
h <- hist(x, breaks = 500)
g<- g + qplot(x = h$mids, y = h$density, geom = 'line', colour = 'green')
g <- ggplot(x = h$mids, y = h$density, geom = 'line')
g
g <- ggplot()
g<- g + qplot(x = h$mids, y = h$density, geom = 'line', colour = 'green')
g<- g + geom_line(x = h$mids, y = h$density, geom = 'line', colour = 'green')
g<- g + geom_line(x = h$mids, y = h$density, colour = 'green')
alpha <- 2
x <- (xmin^(-alpha+1)+r*(xmax^(-alpha+1)-xmin^(-alpha+1)))^(1/(-alpha+1))
h <- hist(x, breaks = 500)
g<- g + geom_line(x = h$mids, y = h$density, colour = 'red')
g
g <- ggplot(aes(x,y))
g <- ggplot(aes(h))
g <- ggplot(h, aes(mids))
g <- ggplot(data = h$mids)
h <data.frame(h)
h2 <- data.frame(mids=h$mids, dens=h$density)
g <- ggplot(data = h2, aes(mids,dens)) +
geom_line()
g
alpha <- 3
x <- (xmin^(-alpha+1)+r*(xmax^(-alpha+1)-xmin^(-alpha+1)))^(1/(-alpha+1))
h <- hist(x, breaks = 500)
h2 <- data.frame(mids=h$mids, dens=h$density)
g <- g + ggplot(data = h2, aes(mids,dens)) +
geom_line
d <- Orange
d
library(igraph)
g2 <- erdos.renyi.game(1000, 10/1000)
transitivity(g2)   # this is about 10/1000
tr = transitivity(g2,type = 'local')
sum(tr)
sum(tr,na.rm = TRUE)
mean(tr,na.rm = TRUE)
setwd('Dropbox/Phd_hse/assistance_bach_1415/Magolego/seminars/[2015_04_17]/')
library('igraph')
library('ggplot2')
n=20
p=0.2
m=(n*(n-1)/2)*p
er11 <- erdos.renyi.game(n, p, type="gnp")
er12 <- erdos.renyi.game(n, m, type="gnm")
op <- par(mfrow = c(1, 2))
plot(er11, layout=layout.circle(er11), main="gnp")
plot(er12, layout=layout.circle(er12), main="gnm")
par(op)
print(length(E((er11))))
print(length(E((er12))))
n=100
p1=0.01
p2=0.04
p3=0.1
er21 <- erdos.renyi.game(n, p1, type="gnp")
er22 <- erdos.renyi.game(n, p2, type="gnp")
er23 <- erdos.renyi.game(n, p3, type="gnp")
op <- par(mfrow = c(1, 3))
plot(er21, layout=layout.circle(er21), main="p=0.01")
plot(er22, layout=layout.circle(er22), main="p=0.04")
plot(er23, layout=layout.circle(er23), main="p=0.1")
par(op)
der1 <- degree(er1)
der1 <- degree(er21)
summary(der1)
der21 <- degree(er21)
der22 <- degree(er22)
der23 <- degree(er23)
op <- par(mfrow = c(2, 3))
plot(er21, layout=layout.circle(er21), main="p=0.01")
plot(er22, layout=layout.circle(er22), main="p=0.04")
plot(er23, layout=layout.circle(er23), main="p=0.1")
hist(der21, col=rgb(0,0,1,.4), xlim=c(0,20), xlab="degree",ylab="freq", main="p=0.01")
hist(der22, col=rgb(1,0,0,.4), xlim=c(0,20), xlab="degree",ylab="freq", main="p=0.04")
hist(der23, col=rgb(0,1,0,.4), xlim=c(0,20), xlab="degree",ylab="freq", main="p=0.1")
par(op)
n1=10
n2=30
#n3=200
er311 <- erdos.renyi.game(n1, 0.5/n1, type="gnp")
er312 <- erdos.renyi.game(n1, 1.1/n1, type="gnp")
er313 <- erdos.renyi.game(n1, 4/n1, type="gnp")
er321 <- erdos.renyi.game(n2, 0.5/n2, type="gnp")
er322 <- erdos.renyi.game(n2, 1.1/n2, type="gnp")
er323 <- erdos.renyi.game(n2, 4/n2, type="gnp")
op <- par(mfrow = c(2, 3))
plot(er311, layout=layout.fruchterman.reingold(er311), main="n=10, np=0.5")
plot(er312, layout=layout.fruchterman.reingold(er312), main="n=10, np=1")
plot(er313, layout=layout.fruchterman.reingold(er313), main="n=10, np=4")
plot(er321, layout=layout.fruchterman.reingold(er321), main="n=30, np=0.5")
plot(er322, layout=layout.fruchterman.reingold(er322), main="n=30, np=1")
plot(er323, layout=layout.fruchterman.reingold(er323), main="n=30, np=4")
par(op)
gcc=c()
cc=c()
probability=c()
for (i in 1:20){
probability=c(probability, prob)
er <- erdos.renyi.game(500, prob, type="gnp")
comp <- clusters(er)
largest <- max(comp$csize)
gcc=c(gcc, largest)
clust <- transitivity(er, type="global")
cc=c(cc, clust)
}
gcc=c()
cc=c()
probability=c()
for (i in 1:20){
prob=0.0002*i
probability=c(probability, prob)
er <- erdos.renyi.game(500, prob, type="gnp")
comp <- clusters(er)
largest <- max(comp$csize)
gcc=c(gcc, largest)
clust <- transitivity(er, type="global")
cc=c(cc, clust)
}
par(mfrow = c(1,1))
plot(probability*500, gcc, pch=19, col=26, xlab="np", main="Size of the gigantic connected component")
g <- read.graph(file = 'as-22july06.gml', format = 'gml')
d <- degree.distribution(g)
#
d <- degree.distribution(g)
plot(d,log = 'xy', xlab = 'Degree d', ylab = 'p(d)', main = 'Degree distribution in log-log scale ')
k <- mean(degree(g))
k
p <- dpois(x, lambda = k)
p <- dpois(x = x, lambda = k)
x <- 1:500
p <- dpois(x = x, lambda = k)
lines(x, p)
lines(x, p, col = 'red')
k <- mean(degree(g))
k
N <- vcount(g)
log(N)
c <- clusters(graph = g)
c$no
c$csize
vcount(g)
b1=barabasi.game(30, power = 1, m=3, directed=F)
b2=barabasi.game(30, power = 1, m=10, directed=F)
op <- par(mfrow = c(1, 2))
plot(b1, layout=layout.fruchterman.reingold(b1), main="3 new edges")
plot(b2, layout=layout.fruchterman.reingold(b2), main="10 new edges")
par(op)
b3=barabasi.game(1000, power = 1, m=10, directed=F)
db1 <- degree(b1)
db2 <- degree(b2)
db3 <- degree(b3)
op <- par(mfrow = c(1, 3))
hist(db1, breaks=10, col=rgb(0,0,1,.4), xlab="degree",ylab="freq", main="n=30, m=3")
hist(db2, breaks=10, col=rgb(1,0,0,.4),xlab="degree",ylab="freq", main="n=30, m=10")
hist(db3, breaks=50, col=rgb(1,0,0,.4),xlab="degree",ylab="freq", main="n=1000, m=10")
fit <- power.law.fit(b3)
fit <- power.law.fit(degree(b3))
fit$alpha
avpathlen=c()
clustcoef=c()
deg30=c()
deg70=c()
ba=barabasi.game(20, power = 1, m=3, directed=F)
m=15
for (i in 21:300){
ba=add.vertices(ba, 1)
neib=sample(seq(1,vcount(ba)), m, prob = degree(ba,normalized = T))
new_edges=c()
for (n in neib){
new_edges=c(new_edges, c(i, n))
}
ba=add.edges(ba, new_edges)
avpathlen=c(avpathlen, average.path.length(ba))
clustcoef=c(clustcoef, transitivity(ba, type="global"))
if (i>30){
deg30=c(deg30, degree(ba, 30))}
if (i>70){
deg70=c(deg70, degree(ba, 70))}
}
xaxis=c(21:300)
op <- par(mfrow = c(1, 2))
plot(xaxis, avpathlen, pch=19, col=26, xlab="time", ylab="Average path length", main="Average path length")
plot(xaxis, clustcoef, pch=19, col=49, xlab="time", ylab="Clustering coefficient", main="Clustering coefficient")
par(op)
plot(c(31:300), deg30, pch=19, col=35, ylim=c(0, max(deg30)), xlab="time", ylab="Node degree", main="Node degree")
points(c(71:300), deg70, pch=19, col=84)
legend("topleft", c("i=30", "i=70"), fill=c(35, 84))
lat <- graph.lattice(length=4, dim=2, nei=1)
ws1 <- watts.strogatz.game(dim=2, size=4, nei=1, p=0.1, loops = FALSE, multiple = FALSE)
ws2 <- watts.strogatz.game(dim=2, size=4, nei=1, p=0.4, loops = FALSE, multiple = FALSE)
ws3 <- watts.strogatz.game(dim=2, size=4, nei=1, p=0.9, loops = FALSE, multiple = FALSE)
op <- par(mfrow = c(2, 2))
plot(lat, layout=layout.circle(lat), main="Lattice")
plot(ws1, layout=layout.circle(ws1), main="Rewiring probability 0.1")
plot(ws2, layout=layout.circle(ws2), main="Rewiring probability 0.4")
plot(ws3, layout=layout.circle(ws3), main="Rewiring probability 0.9")
par(op)
gcc=c()
cc=c()
probability=c()
for (i in 1:50){
prob=0.0002*i
probability=c(probability, prob)
er <- erdos.renyi.game(500, prob, type="gnp")
comp <- clusters(er)
largest <- max(comp$csize)
gcc=c(gcc, largest)
clust <- transitivity(er, type="global")
cc=c(cc, clust)
}
par(mfrow = c(1,1))
plot(probability*500, gcc, pch=19, col=26, xlab="np", main="Size of the gigantic connected component")
log(500)
gcc=c()
cc=c()
probability=c()
for (i in 1:70){
prob=0.0002*i
probability=c(probability, prob)
er <- erdos.renyi.game(500, prob, type="gnp")
comp <- clusters(er)
largest <- max(comp$csize)
gcc=c(gcc, largest)
clust <- transitivity(er, type="global")
cc=c(cc, clust)
}
par(mfrow = c(1,1))
plot(probability*500, gcc, pch=19, col=26, xlab="np", main="Size of the gigantic connected component")
